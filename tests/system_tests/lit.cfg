# -*- Python -*-
# vim: set filetype=python:
# vim: ts=2:sts=2:sw=2:et:tw=80:

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

try:
  import lit.util
  import lit.formats
except ImportError:
  pass

# name: The name of this test suite.
config.name = 'JFS'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files
# Note this can be overridden by lit.local.cfg files
config.suffixes = ['.smt2']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
jfs_bin_root = getattr(config, 'jfs_bin_root', None)

if jfs_bin_root is not None:
  config.test_exec_root = os.path.join(jfs_bin_root, 'tests', 'system_tests')

# Propogate some environment variable to test environment.
def addEnv(name):
  if name in os.environ:
    config.environment[name] = os.environ[name]

# Sanitizer environment variables
addEnv('ASAN_OPTIONS')
addEnv('ASAN_SYMBOLIZER_PATH')
addEnv('LSAN_OPTIONS')
addEnv('MSAN_OPTIONS')
addEnv('MSAN_SYMBOLIZER_PATH')
addEnv('TSAN_OPTIONS')

# Check that the object root is known.
if config.test_exec_root is None:
  lit.fatal('test execution root not set!')


# Add a substitution for FileCheck
config.substitutions.append(
  ('%FileCheck', config.filecheck_tool_path)
)

# Add a substitution for not
config.substitutions.append(
  ('%not', config.not_tool_path)
)

# Get JFS specific parameters passed on llvm-lit cmd line
# e.g. llvm-lit --param jfs_opts=--help
try:
  lit.params
except AttributeError:
  jfs_extra_params = lit_config.params.get('jfs_opts',"")
else:
  jfs_extra_params = lit.params.get('jfs_opts',"")

jfs_tool_path = config.jfs_tool_path
jfs_opt_tool_path = config.jfs_opt_tool_path

if len(jfs_extra_params) != 0:
  print("Passing extra jfs command line args: {0}".format(
    jfs_extra_params)
  )
  jfs_tool_path += " {}".format(jfs_extra_params)

# Add a substitution for jfs
config.substitutions.append(
  ('%jfs-opt', jfs_opt_tool_path)
)
config.substitutions.append(
  ('%jfs', jfs_tool_path)
)
